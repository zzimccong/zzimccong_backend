plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'project.zzimccong'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Data JPA 의존성 추가 (JPA 사용)
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// Spring Thymeleaf 의존성 추가 (템플릿 엔진 사용)
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	// Spring Validation 의존성 추가 (검증 기능 사용)
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// Spring Web 의존성 추가 (웹 애플리케이션 개발)
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// Spring Security 의존성 추가 (보안 기능 사용)
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// JWT (JSON Web Token) 의존성 추가 (토큰 기반 인증)
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	// OAuth2 JOSE 의존성 추가 (JSON Web Signature, Encryption 사용)
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	// 이메일 발송 기능을 위한 Spring Boot Mail 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	// SMS 발송을 위한 Nurigo SDK 의존성 추가
	implementation 'net.nurigo:sdk:4.3.0'
	// redis 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// FCM
	implementation 'com.google.firebase:firebase-admin:9.1.1'

	// Lombok 의존성 추가 (컴파일 시에만 사용)
	compileOnly 'org.projectlombok:lombok'
	// 개발 환경에서만 사용하는 Spring Boot DevTools 의존성 추가 (핫 리로딩 등)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// H2 데이터베이스 의존성 추가 (런타임에서 사용)
	runtimeOnly 'com.h2database:h2'
	// MySQL 커넥터 의존성 추가 (런타임에서 사용)
	runtimeOnly 'com.mysql:mysql-connector-j'
	// Lombok 어노테이션 프로세서 의존성 추가
	annotationProcessor 'org.projectlombok:lombok'
	// Spring Boot 테스트 의존성 추가
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// Spring Security 테스트 의존성 추가
	testImplementation 'org.springframework.security:spring-security-test'
	// JUnit 플랫폼 런처 의존성 추가 (테스트 실행 시 사용)
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// selenium 웹 브라우저 자동화 (크롤링)
	implementation 'org.seleniumhq.selenium:selenium-java:4.1.4'
	// queryDSL 설정
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}